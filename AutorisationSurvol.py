# -*- coding: utf-8 -*-
"""
/***************************************************************************
 pluginSurvol
                                 A QGIS plugin
 C'est un plugin pour générer des itinéraires de survol
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-06-16
        git sha              : $Format:%H$
        copyright            : (C) 2023 by PNMercantour
        email                : eric.chraibi@mercantour-parcnational.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtWidgets import QApplication, QWidget
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsProject
from PyQt5.QtWidgets import QCheckBox
from PyQt5 import QtWidgets

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .AutorisationSurvol_dialog import pluginSurvolDialog
import os.path
from PyQt5 import QtCore, QtGui
import processing
from qgis import *
from qgis.core import *
from qgis.gui import *
import geopandas as gpd
import time
import pandas as pd
import geopandas as gpd
from shapely import wkt


def new_col(lyr, col_name, default_value=NULL):
    lyr.startEditing()
    if lyr.dataProvider().fieldNameIndex(col_name) == -1:
        lyr.dataProvider().addAttributes([QgsField(col_name, QtCore.QVariant.String)])
        lyr.updateFields()

    id_new_col = lyr.dataProvider().fieldNameIndex(col_name)

    for feature in lyr.getFeatures():
        lyr.changeAttributeValue(feature.id(), id_new_col, default_value)
    lyr.commitChanges()   
    return

def split_layer(layer_1, layer_2):
    # Splits layer_1 at intersection with layer 2
    clip_params = {'INPUT': layer_1,
        'OVERLAY': layer_2,
        'OUTPUT': "TEMPORARY_OUTPUT"}
    intersection_lyr = processing.run('qgis:clip',clip_params)["OUTPUT"]
    new_col(intersection_lyr, "zone_coeur", default_value="oui")
    
    diff = processing.run('qgis:difference',clip_params)["OUTPUT"]
    new_col(diff, "zone_coeur", default_value="non")
    
    merged = processing.run("native:mergevectorlayers", 
                        {'LAYERS':[intersection_lyr, diff],
                        'CRS':None,'OUTPUT':'TEMPORARY_OUTPUT'})["OUTPUT"]
    res = processing.run("native:multiparttosingleparts", {'INPUT':merged,'OUTPUT':'TEMPORARY_OUTPUT'})["OUTPUT"]

    return merged



def split_lines(layer, distance):
    """Split lines from a vector into same length segments
    Doesn't work
    """

    extent = layer.extent()
    xmin = extent.xMinimum()
    xmax = extent.xMaximum()
    ymin = extent.yMinimum()
    ymax = extent.yMaximum()
    res = processing.runalg("grass:v.split",layer, distance, "%f , %f, %f, %f "% (xmin , xmax , ymin , ymax), -1,0, 0, None)
    my_layer_path = res['output'] 
    return res


def layer_to_gdf(layer, g_column='geometry'):

    columns = [f.name() for f in layer.fields()] + [g_column]
    columns_types = [f.typeName() for f in layer.fields()] # We exclude the geometry. Human readable
    # or
    # columns_types = [f.type() for f in layer.fields()] # QVariant type
    row_list = []
    for f in layer.getFeatures():
        row_list.append(dict(zip(columns, f.attributes() + [f.geometry().asWkt()])))

    df = pd.DataFrame(row_list, columns=columns)
    df['geometry'] = gpd.GeoSeries.from_wkt(df['geometry'])
    gdf = gpd.GeoDataFrame(df, geometry='geometry')
    gdf = gdf.set_crs(crs=layer.crs().toWkt())

    return gdf

def columns_to_str(df):
    cols_idx = [col==object for col in df.dtypes]
    for col in df.columns[cols_idx]:
        df[col] = df[col].astype(str)
    df.apply(pd.to_numeric, errors='ignore')
    return df
        
class CheckBox(QWidget):
  def __init__(self, parent=None):
      QWidget.__init__(self, parent)

class pluginSurvol:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'pluginSurvol_{}.qm'.format(locale))
                
        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&AutorisationSurvol')

        # initialize variables for itineraires - type: layer
        self.points = None
        self.output_path = None
        self.cboxes = None
        self.itineraire = []
        self.itineraire_updated = False
        self.buttons_depart = {}
        self.cboxes = {}
        self.points_style = os.path.join(self.plugin_dir, "utilities", "points_style.qml")    
        self.troncons_style = os.path.join(self.plugin_dir, "utilities", "troncons_style.qml")
        self.coeur = os.path.join(self.plugin_dir, "utilities", "coeur.gpkg")
        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStaticq
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('pluginSurvol', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action
    

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/AutorisationSurvol/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Test de texte'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

        
    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&AutorisationSurvol'),
                action)
            self.iface.removeToolBarIcon(action)
            
    
    def process(self):
        # https://gis.stackexchange.com/questions/403081/attribute-table-into-pandas-dataframe-pyqgis
        # for conversion to gdf
        # WIP: Geom returns error. What's the geometry field here? 
        # I also need the sub selection of points from itineraires!
        
        vector_lyr = self.troncons[0]
        pts_lyr = self.points[0]

        # Clear all selections
        mc = self.iface.mapCanvas()
        for layer in mc.layers():
            if layer.type() == layer.VectorLayer:
                layer.removeSelection()
        mc.refresh()
        
        # Select itineraire points
        toselect = []
        for f in pts_lyr.getFeatures():
            if f['localite'] in self.itineraire:
                toselect.append(f.id())
        pts_lyr.selectByIds(toselect)
        
        selected = pts_lyr.selectedFeatures()
        
        temp_layer = pts_lyr.materialize(QgsFeatureRequest().setFilterFids(pts_lyr.selectedFeatureIds()))

            
        path = os.path.join(self.output_path, "points_itineraire.gpkg") 
        if os.path.exists(path):
            goodpath = False
            it = 1
            while os.path.exists(path):
                path = os.path.join(self.output_path, f"points_itineraire_{it}.gpkg")
                it+=1
                if it==100: break
        
        _writer = QgsVectorFileWriter.writeAsVectorFormat(temp_layer, 
            path, "utf-8")
          
        
        pts_itineraire = QgsVectorLayer(path, "points_itineraire", "ogr")
        
        
        pts_itineraire.startEditing()
        if pts_itineraire.dataProvider().fieldNameIndex("plandevol") == -1:
            pts_itineraire.dataProvider().addAttributes([QgsField("plandevol", QtCore.QVariant.String)])
            pts_itineraire.updateFields()

        id_new_col = pts_itineraire.dataProvider().fieldNameIndex("plandevol")

        for feature in pts_itineraire.getFeatures():
            if feature['localite'] == self.depart:
                pts_itineraire.changeAttributeValue(feature.id(), id_new_col, "depart")
            else: 
                pts_itineraire.changeAttributeValue(feature.id(), id_new_col, "arrivee")
        pts_itineraire.commitChanges()
        
        
        # Clip troncons with selection after convex hull + buffer
        
        geom = None
        for feat in selected:
            if geom == None:
                geom = feat.geometry()
            else:
                geom = geom.combine(feat.geometry())
        convexhull = geom.convexHull().buffer(2000,25)
        CRS = pts_lyr.crs().postgisSrid()
        URI = "Polygon?crs=epsg:"+str(CRS)+"&field=id:integer""&index=yes"
        convex_hull_lyr = QgsVectorLayer(URI,"convexhull","memory")
        convex_hull_lyr.startEditing()
        feat2 = QgsFeature()
        feat2.setGeometry(convexhull)
        feat2.setAttributes([1])
        convex_hull_lyr.addFeature(feat2)
        convex_hull_lyr.commitChanges()
        
        # save management
        clip_params = {'INPUT': vector_lyr,
        'OVERLAY': convex_hull_lyr,
        'OUTPUT': "TEMPORARY_OUTPUT"}
        clipped_troncons = processing.run('qgis:clip',clip_params)["OUTPUT"]
        time.sleep(0.05)
        coeur = QgsVectorLayer(self.coeur, 'coeur', "ogr")
        res_troncons = split_layer(clipped_troncons, coeur)
        
        path = os.path.join(self.output_path, "troncons_itineraire.gpkg") 
        if os.path.exists(path):
            goodpath = False
            it = 1
            while os.path.exists(path):
                path = os.path.join(self.output_path, f"troncons_itineraire_{it}.gpkg")
                it+=1
                if it==100: break
        _writer = QgsVectorFileWriter.writeAsVectorFormat(res_troncons, 
                path, "utf-8")
                
        res_troncons = QgsVectorLayer(path, "troncons_itineraire", "ogr")
        QgsProject.instance().addMapLayer(res_troncons)
        QgsProject.instance().addMapLayer(pts_itineraire)
        self.points_lyr = pts_itineraire
        self.troncons_lyr = res_troncons
        return 

    def tab_refresh(self):
        time.sleep(0.15)
       
        if self.dlg.tabWidget.currentIndex() == 0:
            # print("tab 1: ", self.dlg.tabWidget.currentIndex())
            pass
        if self.dlg.tabWidget.currentIndex() == 1:
            # print("tab 2: ", self.dlg.tabWidget.currentIndex())
            self.refresh_tab2()
            pass
        if self.dlg.tabWidget.currentIndex() == 2:
            # print("tab 3: ", self.dlg.tabWidget.currentIndex())
            self.refresh_tab3()
            pass
        return
    
    
    def refresh_tab2(self):
        if not self.pts_updated or self.points is None:
            pass
        else: 
            return
        
        
        self.output_path = self.dlg.mQgsFileWidget.filePath()

        vectors_idx = self.dlg.comboBox.currentIndex()
        points_idx = self.dlg.comboBox_2.currentIndex()
        
        # Open window with all points. Check start point on one side
        # Check all points of itineraire on the other

        self.troncons = QgsProject.instance().mapLayersByName(self.alayers[vectors_idx])
        self.points = QgsProject.instance().mapLayersByName(self.alayers[points_idx])
        
        liste_localite = []
        # att_idx = points[0].fieldNameIndex('localite')
        try:
            for feat in self.points[0].getFeatures():
                liste_localite.append(feat["localite"])
        except (KeyError, AttributeError) as e:
            self.iface.messageBar().pushMessage("Pas de champ \"localite\" dans la couche selectionnee", 
                                        level=Qgis.Critical, duration=10)
            return
        liste_localite.sort()
        self._noms_points = liste_localite
        
        #tab_all.set_layout(layout)
        self.cboxes = {}
        #self.dlg.scrollArea.setWidgetResizable(True)

        for i,loc in enumerate(liste_localite):
            self.create_cbox(i, loc)
            print(i, loc)
            
        self.pts_updated=True
            
        return
    
    
    def delete_departs(self):
        if len(self.buttons_depart) > 0:
            liste_toiterate = list(self.buttons_depart.keys())
            for nom in liste_toiterate:
                self.dlg.gridLayout_7.removeWidget(self.buttons_depart[nom])
                self.buttons_depart[nom].deleteLater()
                del self.buttons_depart[nom]
    
    def delete_itineraires(self):
        if len(self.cboxes) > 0:
            liste_toiterate = list(self.cboxes.keys())
            for i,nom in enumerate(liste_toiterate):
                self.dlg.gridLayout_2.removeWidget(self.cboxes[i])
                self.cboxes[i].deleteLater()
                del self.cboxes[i]
            self._noms_points = []
            self.cboxes = {}
        return
    
    def refresh_tab3(self):
    
        # remove all buttons
        self.delete_departs()
        # create new buttons
        for nom in self.itineraire:
            self.create_button_depart(nom)
        return
        
    def create_cbox(self, i, loc):
        self.cboxes[i] = QtWidgets.QCheckBox(loc)
        self.dlg.gridLayout_2.addWidget(self.cboxes[i], i//3, i%3, 1, 1)
        self.cboxes[i].stateChanged.connect(lambda: self.itineraire_change(i))
        return
        
    def itineraire_change(self, i):
        """Update when a checkbox in tab2 is ticked:
        save itineraire name, and create new button in tab3.
        And do the opposite when checbox is unticked
        """
        if self.cboxes[i].isChecked():
            self.itineraire.append(self._noms_points[i])
        else:
            self.itineraire.remove(self._noms_points[i])
        self.itineraire_updated = False
        return 
        
    def create_button_depart(self, itineraire):
        # Create button to select depart point
        self.buttons_depart[itineraire] = QtWidgets.QRadioButton(itineraire)
        self.dlg.gridLayout_7.addWidget(self.buttons_depart[itineraire]) 
        self.buttons_depart[itineraire].toggled.connect(lambda: self.depart_change(itineraire))
        return
        
    def depart_change(self, depart):
        if self.buttons_depart[depart].isChecked():
            self.depart = depart

    def manual_execute(self):
        self.process()
        
        #test split_lines(self.troncons_lyr, 1000)
        
        self.points_lyr.loadNamedStyle(self.points_style)
        self.troncons_lyr.loadNamedStyle(self.troncons_style)
        print("finished")
        self.dlg.close()
        self.delete_departs()
        
        self.dlg.tabWidget.setCurrentIndex(0)
        
    def next_tab(self):
        self.dlg.tabWidget.setCurrentIndex(self.dlg.tabWidget.currentIndex()+1)
        time.sleep(0.1)
        self.tab_refresh()
        return
        
    def previous_tab(self):
        self.dlg.tabWidget.setCurrentIndex(self.dlg.tabWidget.currentIndex()-1)
        time.sleep(0.1)
        self.tab_refresh()
        return
    
    def _to_update(self):
        self.pts_updated=False
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = pluginSurvolDialog()
            self.dlg.pushButton_2.clicked.connect(lambda: self.next_tab())
            self.dlg.pushButton_4.clicked.connect(lambda: self.next_tab())
            self.dlg.pushButton_5.clicked.connect(lambda: self.previous_tab())
            self.dlg.tabWidget.currentChanged.connect(lambda: self.tab_refresh())
            self.dlg.pushButton.clicked.connect(lambda: self.manual_execute())
        
            self.dlg.pushButton_3.clicked.connect(lambda: self.dlg.close())
        
        # On tab change
        
        # On toolbar plugin click
        self.alayers = [layer.name() for layer in QgsProject.instance().mapLayers().values()]

            #self.dlg.pushButton.clicked.connect(self.run)
            # Close Gui
            
        if self.first_start == False:
            self.itineraire=[] # That's DIRTY
            self.dlg.comboBox.clear()
            self.dlg.comboBox_2.clear()
            self.delete_departs()
            self.delete_itineraires()
        # Clear the contents of the comboBox from previous runs
        self.dlg.comboBox.clear()
        self.dlg.comboBox.currentTextChanged.connect(self._to_update)
        # Populate the comboBox with names of all the loaded layers
        self.dlg.comboBox.addItems([name for name in self.alayers])
        self.dlg.comboBox_2.clear()
        # Populate the comboBox with names of all the loaded layers
        self.dlg.comboBox_2.addItems([name for name in self.alayers])
        
        # show the dialog
        self.dlg.show()

        
            
    




